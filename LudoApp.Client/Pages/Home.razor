@page "/home"
@inject NavigationManager Navigation
@inject LudoApp.Client.Services.AuthService AuthService
@inject LudoApp.Client.Services.GameClientService GameService 
@inject HttpClient Http  

<div class="text-center mt-5">
    <h3>Welcome to Ludo!</h3>

    @if (AuthService.IsLoggedIn)
    {
        <div class="card mx-auto" style="max-width: 400px;">
            <div class="card-body">
                <h5 class="card-title">Hello, <span class="text-primary">@AuthService.Username</span>!</h5>
                <p class="card-text">You are logged in and ready to play.</p>
                
                @if (userWins.HasValue)
                {
                    <div class="alert alert-success">
                        üèÜ <strong>Total Wins: @userWins.Value</strong>
                    </div>
                }
                else if (isLoadingWins)
                {
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading wins...</span>
                    </div>
                    <small class="text-muted ms-2">Loading your stats...</small>
                }
                
                <button class="btn btn-primary btn-lg mt-3" @onclick="PlayGame">
                    üé≤ Play Ludo
                </button>
            </div>
        </div>
    }
    else
    {
        <p class="lead">Please log in to play.</p>
        <button class="btn btn-outline-primary" @onclick="GoToLogin">Login</button>
    }
</div>

@code {
    private int? userWins = null;
    private bool isLoadingWins = false;

    protected override async Task OnInitializedAsync()
    {
        AuthService.AuthStateChanged += AuthStateChangedHandler;
        
        // Load wins when page loads if user is logged in
        if (AuthService.IsLoggedIn)
        {
            await LoadUserWins();
        }
    }

    private async Task LoadUserWins()
    {
        if (!AuthService.IsLoggedIn) return;
        
        try
        {
            isLoadingWins = true;
            StateHasChanged();
            
            Console.WriteLine($"[Home.razor] Loading wins for user: {AuthService.Username}");
            var response = await Http.GetAsync($"api/user/{AuthService.Username}/wins");
            
            Console.WriteLine($"[Home.razor] Response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var winsText = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[Home.razor] Wins response: {winsText}");
                
                // Remove any quotes and parse
                var cleanWinsText = winsText.Trim('"');
                if (int.TryParse(cleanWinsText, out int wins))
                {
                    userWins = wins;
                    Console.WriteLine($"[Home.razor] Parsed wins: {wins}");
                    StateHasChanged(); // ‚ö†Ô∏è Add this to force UI update
                }
                else
                {
                    Console.Error.WriteLine($"[Home.razor] Failed to parse wins: '{winsText}'");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"[Home.razor] Failed to load wins. Status: {response.StatusCode}, Content: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[Home.razor] Error loading user wins: {ex.Message}");
        }
        finally
        {
            isLoadingWins = false;
            StateHasChanged(); // This should show the wins
        }
    }

    private async void AuthStateChangedHandler()
    {
        if (AuthService.IsLoggedIn)
        {
            await LoadUserWins();
        }
        else
        {
            userWins = null;
        }
        StateHasChanged();
    }

    private async Task PlayGame()
    {
        if (AuthService.IsLoggedIn)
        {
            Console.WriteLine("[Home.razor] Initiating matchmaking...");
            await GameService.FindMatchAsync();
            Navigation.NavigateTo("/newgame/waiting");
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        AuthService.AuthStateChanged -= AuthStateChangedHandler;
    }
}